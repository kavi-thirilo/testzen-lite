###############################################################################
# GitHub Actions - Android Emulator Testing
# Runs TestZen tests on Android emulator with hardware acceleration
###############################################################################

name: Android Emulator Tests

on:
  push:
    branches:
      - main
      - testzen_ci_cd_integration
      - develop
  pull_request:
    branches:
      - main
  schedule:
    - cron: '0 3 * * *'  # 9 PM CST daily (3 AM UTC)
  workflow_dispatch:  # Allow manual trigger

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  android-emulator-tests:
    name: Run Android Tests on Emulator
    runs-on: ubuntu-latest
    timeout-minutes: 20

    strategy:
      matrix:
        api-level: [29]  # Android 10
        # Add more API levels if needed: [28, 29, 30]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python 3.9
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'
          cache: 'pip'

      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Setup Android SDK
        uses: android-actions/setup-android@v3

      - name: Cache Node modules and Appium
        uses: actions/cache@v4
        with:
          path: |
            ~/.npm
            ~/.appium
          key: ${{ runner.os }}-appium-${{ hashFiles('**/package*.json') }}
          restore-keys: |
            ${{ runner.os }}-appium-

      - name: Install Appium
        run: |
          npm install -g appium@latest
          appium driver install uiautomator2 || appium driver update uiautomator2

      - name: Enable KVM (hardware acceleration)
        run: |
          echo 'KERNEL=="kvm", GROUP="kvm", MODE="0666", OPTIONS+="static_node=kvm"' | sudo tee /etc/udev/rules.d/99-kvm4all.rules
          sudo udevadm control --reload-rules
          sudo udevadm trigger --name-match=kvm

      - name: AVD cache
        uses: actions/cache@v4
        id: avd-cache
        with:
          path: |
            ~/.android/avd/*
            ~/.android/adb*
          key: avd-${{ matrix.api-level }}

      - name: Create AVD and generate snapshot for caching
        if: steps.avd-cache.outputs.cache-hit != 'true'
        uses: reactivecircus/android-emulator-runner@v2
        with:
          api-level: ${{ matrix.api-level }}
          arch: x86_64
          force-avd-creation: false
          emulator-options: -no-window -gpu swiftshader_indirect -noaudio -no-boot-anim -camera-back none -no-metrics
          disable-animations: false
          script: echo "Generated AVD snapshot for caching."

      - name: Check for APK in apps folder
        id: check-apk
        run: |
          if [ -f apps/android/*.apk ]; then
            echo "apk_exists=true" >> $GITHUB_OUTPUT
            echo "APK found in apps/android/ folder"
            ls -lh apps/android/*.apk
          else
            echo "apk_exists=false" >> $GITHUB_OUTPUT
            echo "WARNING: No APK found in apps/android/ folder"
            echo "Tests will need to connect to pre-installed app or you need to add APK to apps/android/"
          fi

      - name: Run Android tests on emulator
        uses: reactivecircus/android-emulator-runner@v2
        with:
          api-level: ${{ matrix.api-level }}
          arch: x86_64
          force-avd-creation: false
          emulator-options: -no-snapshot-save -no-window -gpu swiftshader_indirect -noaudio -no-boot-anim -camera-back none -wipe-data -no-metrics
          disable-animations: true
          script: bash scripts/ci/android_test_runner.sh
        continue-on-error: false

      - name: Upload test reports
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: android-test-reports-api-${{ matrix.api-level }}
          path: |
            reports/*.html
            reports/*.json
            reports/screenshots/**/*.png
          retention-days: 7
          compression-level: 0
          if-no-files-found: warn

      - name: Generate test summary
        if: always()
        run: |
          if [ -d "reports" ]; then
            echo "# Android Test Results (API ${{ matrix.api-level }})" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY

            # Extract test results if JSON report exists
            if [ -f "reports/android_test_report.json" ]; then
              python3 -c 'import json; data = json.load(open("reports/android_test_report.json")); print("- **Total Tests:** {}\n- **Passed:** {}\n- **Failed:** {}".format(data.get("total_tests", 0), data.get("passed", 0), data.get("failed", 0)))' >> $GITHUB_STEP_SUMMARY || echo "JSON parsing failed" >> $GITHUB_STEP_SUMMARY
            fi
          fi
